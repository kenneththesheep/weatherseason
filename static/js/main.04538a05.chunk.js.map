{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDom","render","document","querySelector"],"mappings":"+LAGMA,G,MAAc,CAChBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACIF,KAAM,aACdC,SAAU,eAyBHE,EATO,SAACC,GACnB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,KAbXC,GAagB,IAAIE,MAAOC,YAZpC,GAAKH,EAAQ,EAETD,EAAM,EAAG,SAAU,SAInBA,EAAM,EAAG,SAAU,UAKN,EAEJP,EAAaS,GAA9BP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SACb,OAAO,yBAAKS,UAAS,yBAAqBH,IAC1C,uBAAGG,UAAS,UAAMT,EAAN,6BACZ,4BAAKD,GACD,uBAAGU,UAAS,UAAMT,EAAN,gCC9BdU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAY,oBACb,yBAAKA,UAAW,sBAAsBN,EAAMQ,WAKxDD,EAAQE,aAAc,CAClBD,QAAS,WAIED,QCVTG,E,4MACFC,MAAO,CAAEV,IAAK,KAAMW,aAAa,M,kEACjB,IAAD,OACfC,QAAQC,IAAI,+BAERC,OAAOC,UAAUC,YAAYC,oBAC7B,SAACC,GAAD,OAAa,EAAKC,SAAS,CAACnB,IAAKkB,EAASE,OAAOC,cACjD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAACR,aAAcW,EAAIf,e,2CAK9CK,QAAQC,IAAI,a,sCAIX,OAAGU,KAAKb,MAAMC,eAAgBY,KAAKb,MAAMV,IAC3B,uCAAauB,KAAKb,MAAMC,eAE/BY,KAAKb,MAAMC,cAAeY,KAAKb,MAAMV,IAC9B,6BACD,kBAAC,EAAD,CACEA,IAAOuB,KAAKb,MAAMV,OAMxB,kBAAC,EAAD,CAASO,QAAS,qC,+BAMxB,OACI,yBAAKF,UAAW,cACXkB,KAAKC,gBADV,S,GAnCMC,IAAMC,WA4CxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.04538a05.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react';\n\nconst seasonConfig ={\n    summer: {\n        text: \"Let's hit the beach!\",\n        iconName: 'sun'\n    },\n    winter: {\n                text: \"Let it go!\",\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month)=>{\n    if(month > 2 && month < 9)\n        {\n            return lat > 0? 'summer': 'winter';\n        }\n        else\n        {\n            return lat > 0? 'winter': 'summer';\n        }\n}\n\n\nconst SeasonDisplay = (props) =>{\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text, iconName}= seasonConfig[season];\n    return <div className ={`season-display ${season}`}>\n    <i className ={`${iconName} icon-left massive icon`}/>\n    <h1>{text}</h1>\n        <i className ={`${iconName} icon-right massive icon`}/>\n    </div>;\n};\nexport default SeasonDisplay;","import React from 'react'\n\nconst Spinner = (props) =>{\n    return (\n        <div className = \"ui active dimmer\">\n            <div className =\"ui big text loader\">{props.message}</div>\n        </div>\n        );\n};\n\nSpinner.defaultProps ={\n    message: 'Loading'\n}\n\n\nexport default Spinner;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner'\n\nclass App extends React.Component{\n    state ={ lat: null, errorMessage:null}\ncomponentDidMount(){\n    console.log(\"Just rendered to the screen\")\n\n        window.navigator.geolocation.getCurrentPosition(\n        (position)=> this.setState({lat: position.coords.latitude}),\n        (err) => this.setState({errorMessage: err.message})\n        );\n\n}\ncomponentDidUpdate(){\n    console.log(\"updated\")\n}\n\nrenderContent() {\n     if(this.state.errorMessage&& !this.state.lat){\n            return <div>Error: {this.state.errorMessage}</div>\n        }\n        if(!this.state.errorMessage&& this.state.lat){\n            return <div>\n                  <SeasonDisplay\n                    lat = {this.state.lat}\n                  />\n            </div>\n\n        }\n\n        return<Spinner message =\"Please accept location request\"/>\n}\n\n\n    /////render jsx\n    render(){\n        return (\n            <div className =\"border red\">\n                {this.renderContent()};\n            </div>\n            );\n\n\n    }\n}\n\nReactDom.render(\n    <App/>,\n    document.querySelector('#root')\n\n    )"],"sourceRoot":""}